from flask import Flask, render_template, request
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

app = Flask(__name__)

# =====================
# Training Dataset
# =====================


data = [
    [1, 99, 100, 9.2, 8.7, 0.5139664804, 0.4860335196],
    [2, 98, 100, 17.6, 16.5, 1.032258065, 0.9677419355],
    [3, 97, 100, 26.2, 21.5, 1.647798742, 1.352201258],
    [4, 96, 100, 38.1, 32.43, 2.160782646, 1.839217354],
    [5, 95, 100, 45.1, 39.3, 2.671800948, 2.328199052],
    [6, 94, 100, 57.6, 46.8, 3.310344828, 2.689655172],
    [7, 93, 100, 67.02, 54.52, 3.859963798, 3.140036202],
    [8, 92, 100, 76.68, 62.23, 4.416096753, 3.583903247],
    [9, 91, 100, 86.34, 69.94, 4.972229332, 4.027770668],
    [10, 90, 100, 96, 77.65, 5.528361647, 4.471638353],
    [11, 89, 100, 105.66, 85.36, 6.08449377, 4.91550623],
    [12, 88, 100, 115.32, 93.07, 6.64062575, 5.35937425],
    [13, 87, 100, 124.98, 100.78, 7.196757619, 5.803242381],
    [14, 86, 100, 134.64, 108.49, 7.752889401, 6.247110599],
    [15, 85, 100, 144.3, 116.2, 8.309021113, 6.690978887],
    [16, 84, 100, 153.96, 123.91, 8.865152769, 7.134847231],
    [17, 83, 100, 163.62, 131.62, 9.421284379, 7.578715621],
    [18, 82, 100, 173.2, 139.33, 9.975362365, 8.024637635],
    [19, 81, 100, 182.94, 147.03, 10.53386672, 8.466133285],
    [20, 80, 100, 193.6, 154.74, 11.11557674, 8.884423265],
    [21, 79, 100, 202.26, 162.45, 11.6461298, 9.353870198],
    [22, 78, 100, 211.92, 170.16, 12.20226131, 9.797738693],
    [23, 77, 100, 221.58, 177.87, 12.75839279, 10.24160721],
    [24, 76, 100, 231.24, 185.58, 13.31452426, 10.68547574],
    [25, 75, 100, 240.9, 193.29, 13.8706557, 11.1293443],
    [26, 74, 100, 249.56, 201, 14.40110085, 11.59889915],
    [27, 73, 100, 260.22, 208.71, 14.98291856, 12.01708144],
    [28, 72, 100, 268.88, 216.42, 15.51337317, 12.48662683],
    [29, 71, 100, 279.54, 224.13, 16.09518137, 12.90481863],
    [30, 70, 100, 289.2, 231.84, 16.65131276, 13.34868724],
    [31, 69, 100, 296.3, 239.55, 17.14155081, 13.85844919],
    [32, 68, 100, 305.9, 247.26, 17.69614578, 14.30385422],
    [33, 67, 100, 315.5, 254.97, 18.25074062, 14.74925938],
    [34, 66, 100, 325.1, 262.68, 18.80533533, 15.19466467],
    [35, 65, 100, 334.69, 270.39, 19.35967145, 15.64032855],
    [36, 64, 100, 344.29, 278.09, 19.91458594, 16.08541406],
    [37, 63, 100, 353.89, 285.8, 20.46918038, 16.53081962],
    [38, 62, 100, 363.48, 293.51, 21.02351634, 16.97648366],
    [39, 61, 100, 373.08, 301.22, 21.57811063, 17.42188937],
    [40, 60, 100, 382.68, 308.93, 22.13270485, 17.86729515],
    [41, 59, 100, 392.28, 316.64, 22.68729899, 18.31270101],
    [42, 58, 100, 401.87, 324.35, 23.24163477, 18.75836523],
    [43, 57, 100, 411.47, 332.06, 23.7962288, 19.2037712],
    [44, 56, 100, 421.07, 339.77, 24.35082277, 19.64917723],
    [45, 55, 100, 430.66, 347.48, 24.90515845, 20.09484155],
    [46, 54, 100, 440.26, 355.19, 25.45975234, 20.54024766],
    [47, 53, 100, 449.86, 362.9, 26.01434618, 20.98565382],
    [48, 52, 100, 459.46, 370.61, 26.56893997, 21.43106003],
    [49, 51, 100, 469.05, 378.32, 27.12327555, 21.87672445],
    [50, 50, 100, 478.65, 386.03, 27.67786927, 22.32213073],
    [51, 49, 100, 488.25, 393.74, 28.23246295, 22.76753705],
    [52, 48, 100, 497.84, 401.45, 28.78679847, 23.21320153],
    [53, 47, 100, 507.44, 409.16, 29.3413921, 23.6586079],
    [54, 46, 100, 517.04, 416.86, 29.89630581, 24.10369419],
    [55, 45, 100, 526.64, 424.57, 30.45089938, 24.54910062],
    [56, 44, 100, 536.23, 432.28, 31.00523485, 24.99476515],
    [57, 43, 100, 545.83, 439.99, 31.55982837, 25.44017163],
    [58, 42, 100, 555.43, 447.7, 32.11442186, 25.88557814],
    [59, 41, 100, 565.02, 455.41, 32.66875729, 26.33124271],
    [60, 40, 100, 574.62, 463.12, 33.22335074, 26.77664926],
    [61, 39, 100, 584.22, 470.83, 33.77794417, 27.22205583],
    [62, 38, 100, 593.82, 478.54, 34.33253758, 27.66746242],
    [63, 37, 100, 603.41, 486.25, 34.88687297, 28.11312703],
    [64, 36, 100, 613.01, 493.96, 35.44146635, 28.55853365],
    [65, 35, 100, 622.61, 501.67, 35.9960597, 29.0039403],
    [66, 34, 100, 632.2, 509.38, 36.55039507, 29.44960493],
    [67, 33, 100, 641.8, 517.09, 37.10498839, 29.89501161],
    [68, 32, 100, 651.4, 524.8, 37.6595817, 30.3404183],
    [69, 31, 100, 661, 532.51, 38.214175, 30.785825],
    [70, 30, 100, 670.59, 540.22, 38.76851034, 31.23148966],
    [71, 29, 100, 680.19, 547.92, 39.3234238, 31.6765762],
    [72, 28, 100, 689.79, 555.63, 39.87801705, 32.12198295],
    [73, 27, 100, 699.38, 563.34, 40.43235238, 32.56764762],
    [74, 26, 100, 708.98, 571.05, 40.98694562, 33.01305438],
    [75, 25, 100, 718.58, 578.76, 41.54153884, 33.45846116],
    [76, 24, 100, 728.18, 586.47, 42.09613205, 33.90386795],
    [77, 23, 100, 737.77, 594.18, 42.65046736, 34.34953264],
    [78, 22, 100, 747.37, 601.89, 43.20506055, 34.79493945],
    [79, 21, 100, 756.97, 609.6, 43.75965373, 35.24034627],
    [80, 20, 100, 766.56, 617.31, 44.31398903, 35.68601097],
    [81, 19, 100, 776.16, 625.02, 44.8685822, 36.1314178],
    [82, 18, 100, 785.76, 632.73, 45.42317535, 36.57682465],
    [83, 17, 100, 795.36, 640.44, 45.97776849, 37.02223151],
    [84, 16, 100, 804.95, 648.15, 46.53210378, 37.46789622],
    [85, 15, 100, 814.55, 655.86, 47.08669691, 37.91330309],
    [86, 14, 100, 824.15, 663.57, 47.64129003, 38.35870997],
    [87, 13, 100, 833.74, 671.28, 48.19562531, 38.80437469],
    [88, 12, 100, 843.34, 678.99, 48.75021842, 39.24978158],
    [89, 11, 100, 852.94, 686.69, 49.30513175, 39.69486825],
    [90, 10, 100, 862.54, 694.4, 49.85972484, 40.14027516],
    [91, 9, 100, 872.13, 702.11, 50.41406012, 40.58593988],
    [92, 8, 100, 881.73, 709.82, 50.9686532, 41.0313468],
    [93, 7, 100, 891.33, 717.53, 51.52324627, 41.47675373],
    [94, 6, 100, 900.92, 725.24, 52.07758154, 41.92241846],
    [95, 5, 100, 910.52, 732.95, 52.63217461, 42.36782539],
    [96, 4, 100, 920.12, 740.66, 53.18676766, 42.81323234],
    [97, 3, 100, 929.72, 748.37, 53.74136071, 43.25863929],
    [98, 2, 100, 939.31, 756.08, 54.29569598, 43.70430402],
]

df = pd.DataFrame(
    data,
    columns=[
        "Acetic",
        "Water",
        "Ethyl",
        "Burette_Aq",
        "Burette_Org",
        "Extract_Aq",
        "Extract_Org",
    ],
)

# Train Models
X = df[["Acetic", "Water", "Ethyl"]].values
y_bqA = df["Burette_Aq"].values
y_bqO = df["Burette_Org"].values
y_exA = df["Extract_Aq"].values
y_exO = df["Extract_Org"].values

model_bqA = LinearRegression().fit(X, y_bqA)
model_bqO = LinearRegression().fit(X, y_bqO)
model_exA = LinearRegression().fit(X, y_exA)
model_exO = LinearRegression().fit(X, y_exO)


# Prediction Function
def predict(acetic, water, ethyl):
    features = np.array([[acetic, water, ethyl]])

    bqA = model_bqA.predict(features)[0]
    bqO = model_bqO.predict(features)[0]
    exA = model_exA.predict(features)[0]
    exO = model_exO.predict(features)[0]

    return {
        "Burette_Aqueous": round(bqA, 3),
        "Burette_Organic": round(bqO, 3),
        "Extracted_Aqueous": round(exA, 6),
        "Extracted_Organic": round(exO, 6),
        "Total_Extracted": round(exA + exO, 6),
        "Total_Burette": round(bqA + bqO, 3),
    }


# =====================
# Flask Routes
# =====================
@app.route("/", methods=["GET", "POST"])
def home():
    result = None
    if request.method == "POST":
        acetic = float(request.form["acetic"])
        water = float(request.form["water"])
        ethyl = float(request.form["ethyl"])
        result = predict(acetic, water, ethyl)
    return render_template("index.html", result=result)


if __name__ == "__main__":
    app.run(debug=True)
